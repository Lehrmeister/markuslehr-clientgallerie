#!/bin/bash
# Demo-Script f√ºr die neuen Code-Analyse-Tools
# Zeigt alle Funktionen der verbesserten Architektur-Analyse

echo "üéØ DEMONSTRATION: VERANTWORTLICHKEITS-BASIERTE CODE-ANALYSE"
echo "=========================================================="
echo ""

# 1. Intelligent Code Analysis
echo "1Ô∏è‚É£  INTELLIGENTE CODE-ANALYSE (statt starrer Zeilenlimits)"
echo "-----------------------------------------------------------"
echo "Analysiert nach:"
echo "‚Ä¢ Zyklomatische Komplexit√§t < 10 pro Methode"
echo "‚Ä¢ Kopplungsgrad < 7 Abh√§ngigkeiten"
echo "‚Ä¢ Koh√§sionsgrad > 70%"
echo "‚Ä¢ Single Responsibility Score"
echo ""

if [ -f "scripts/smart-code-analyzer.php" ]; then
    echo "üìä Ausf√ºhrung:"
    php scripts/smart-code-analyzer.php . | head -30
    echo ""
fi

# 2. Dead Code Detection
echo "2Ô∏è‚É£  DEAD CODE & VERWAISTE TESTS DETECTION"
echo "-------------------------------------------"
echo "Findet:"
echo "‚Ä¢ Unbenutzte Klassen und Methoden"
echo "‚Ä¢ Verwaiste Test-Dateien ohne Source-Code"
echo "‚Ä¢ Dateien ohne Referenzen"
echo ""

if [ -f "scripts/find-dead-code.php" ]; then
    echo "üóëÔ∏è Ausf√ºhrung:"
    php scripts/find-dead-code.php . | head -20
    echo ""
fi

# 3. File Structure Validation
echo "3Ô∏è‚É£  DATEI-STRUKTUR & NAMING CONVENTIONS"
echo "----------------------------------------"
echo "Validiert:"
echo "‚Ä¢ PascalCase f√ºr Klassen, kebab-case f√ºr Verzeichnisse"
echo "‚Ä¢ Eine Klasse pro Datei (Single Responsibility)"
echo "‚Ä¢ Dateiname = Klassenname"
echo "‚Ä¢ Erforderliche Dateien (README.md, tests, etc.)"
echo ""

if [ -f "scripts/validate-file-structure.php" ]; then
    echo "üèóÔ∏è Ausf√ºhrung:"
    php scripts/validate-file-structure.php . | head -25
    echo ""
fi

# 4. Verf√ºgbare NPM Scripts
echo "4Ô∏è‚É£  VERF√úGBARE ANALYSE-COMMANDS"
echo "--------------------------------"
echo "üì¶ NPM Scripts:"
echo "‚Ä¢ npm run check:responsibility  - Single Responsibility Analysis"
echo "‚Ä¢ npm run check:coupling       - Kopplungsgrad pr√ºfen"
echo "‚Ä¢ npm run find:orphaned        - Verwaiste Tests finden"
echo "‚Ä¢ npm run validate:structure   - Struktur-Validierung"
echo "‚Ä¢ npm run report:full          - Vollst√§ndiger Qualit√§ts-Report"
echo ""

echo "üêò Composer Scripts:" 
echo "‚Ä¢ composer check:responsibility - PHP Single Responsibility"
echo "‚Ä¢ composer check:coupling      - PHP Kopplungsanalyse"
echo "‚Ä¢ composer check:cohesion      - PHP Koh√§sionsanalyse"
echo "‚Ä¢ composer quality:full        - Vollst√§ndige PHP-Qualit√§ts-Analyse"
echo ""

# 5. VS Code Integration
echo "5Ô∏è‚É£  VS CODE INTEGRATION"
echo "------------------------"
echo "üéÆ VS Code Tasks verf√ºgbar:"
echo "‚Ä¢ 'Check Code Responsibility'  - Ctrl+Shift+P ‚Üí Tasks: Run Task"
echo "‚Ä¢ 'Find Dead Code'"
echo "‚Ä¢ 'Validate File Structure'"
echo "‚Ä¢ 'Full Quality Report'"
echo ""

echo "‚ú® KI-CONTEXT ENHANCEMENT"
echo "-------------------------"
echo "Der .vscode/ai-context.sh wird jetzt automatisch erweitert um:"
echo "‚Ä¢ Live-Verantwortlichkeits-Analyse"
echo "‚Ä¢ Dead-Code-Detection-Report"
echo "‚Ä¢ Struktur-Validierungs-Summary"
echo ""

echo "üìã ZUSAMMENFASSUNG DER VERBESSERUNGEN"
echo "====================================="
echo "‚úÖ Starre Zeilenlimits ‚Üí Intelligente Verantwortlichkeits-Metriken"
echo "‚úÖ Code-Duplikation ‚Üí Live-Dependency-Tracking"
echo "‚úÖ Verwaiste Tests ‚Üí Automatische Orphan-Detection"
echo "‚úÖ Datei-Chaos ‚Üí Enforced Naming Conventions"
echo "‚úÖ Willk√ºrliche Aufteilung ‚Üí Fachliche Koh√§sion"
echo ""

echo "üöÄ N√ÑCHSTE SCHRITTE"
echo "==================="
echo "1. F√ºhren Sie 'npm run report:full' aus f√ºr vollst√§ndige Analyse"
echo "2. Verwenden Sie VS Code Tasks f√ºr kontinuierliche √úberwachung"  
echo "3. Integrieren Sie die Scripts in Ihre CI/CD Pipeline"
echo "4. Nutzen Sie den erweiterten AI-Context f√ºr bessere KI-Assistenz"
echo ""

echo "Demo abgeschlossen! üéâ"
